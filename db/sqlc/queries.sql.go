// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (username, email, email_verified, image)
VALUES ($1,$2,$3,$4)
RETURNING username
`

type CreateUserParams struct {
	Username      sql.NullString
	Email         sql.NullString
	EmailVerified sql.NullTime
	Image         sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
	)
	var username sql.NullString
	err := row.Scan(&username)
	return username, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET
  username = COALESCE($2, username),
  email = COALESCE($3, email),
  email_verified = COALESCE($4, email_verified)
WHERE
  id = $1
RETURNING id
`

type UpdateUserParams struct {
	ID            uuid.UUID
	Username      sql.NullString
	Email         sql.NullString
	EmailVerified sql.NullTime
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.EmailVerified,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
